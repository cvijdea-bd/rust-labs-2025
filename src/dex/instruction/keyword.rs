use super::Instruction;

impl Instruction {
    /// Returns the string representation of the opcode of this [`Self`].
    pub fn opcode(&self) -> &'static str {
        match self {
            Self::Nop => "nop",
            Self::Move { .. } => "move",
            Self::MoveFrom16 { .. } => "move/from16",
            Self::Move16 { .. } => "move/16",
            Self::MoveWide { .. } => "move-wide",
            Self::MoveWideFrom16 { .. } => "move-wide/from16",
            Self::MoveWide16 { .. } => "move-wide/16",
            Self::MoveObject { .. } => "move-object",
            Self::MoveObjectFrom16 { .. } => "move-object/from16",
            Self::MoveObject16 { .. } => "move-object/16",
            Self::MoveResult { .. } => "move-result",
            Self::MoveResultWide { .. } => "move-result-wide",
            Self::MoveResultObject { .. } => "move-result-object",
            Self::MoveException { .. } => "move-exception",

            Self::ReturnVoid => "return-void",
            Self::Return { .. } => "return",
            Self::ReturnWide { .. } => "return-wide",
            Self::ReturnObject { .. } => "return-object",

            Self::Const4 { .. } => "const/4",
            Self::Const16 { .. } => "const/16",
            Self::Const { .. } => "const",
            Self::ConstHigh16 { .. } => "const/high16",
            Self::ConstWide16 { .. } => "const-wide/16",
            Self::ConstWide32 { .. } => "const-wide/32",
            Self::ConstWide { .. } => "const-wide",
            Self::ConstWideHigh16 { .. } => "const-wide/high16",
            Self::ConstString { .. } => "const-string",
            Self::ConstStringJumbo { .. } => "const-string/jumbo",
            Self::ConstClass { .. } => "const-class",
            Self::MonitorEnter { .. } => "monitor-enter",
            Self::MonitorExit { .. } => "monitor-exit",
            Self::CheckCast { .. } => "check-cast",
            Self::InstanceOf { .. } => "instance-of",

            Self::ArrayLength { .. } => "array-length",
            Self::NewInstance { .. } => "new-instance",
            Self::NewArray { .. } => "new-array",
            Self::FilledNewArray { .. } => "filled-new-array",
            Self::FilledNewArrayRange { .. } => "filled-new-array/range",
            Self::FillArrayData { .. } => "fill-array-data",
            Self::Throw { .. } => "throw",
            Self::Goto { .. } => "goto",
            Self::Goto16 { .. } => "goto/16",
            Self::Goto32 { .. } => "goto/32",
            Self::PackedSwitch { .. } => "packed-switch",
            Self::SparseSwitch { .. } => "sparse-switch",

            Self::CmplFloat { .. } => "cmpl-float",
            Self::CmpgFloat { .. } => "cmpg-float",
            Self::CmplDouble { .. } => "cmpl-double",
            Self::CmpgDouble { .. } => "cmpg-double",
            Self::CmpLong { .. } => "cmp-long",
            Self::IfEq { .. } => "if-eq",
            Self::IfNe { .. } => "if-ne",
            Self::IfLt { .. } => "if-lt",
            Self::IfGe { .. } => "if-ge",
            Self::IfGt { .. } => "if-gt",
            Self::IfLe { .. } => "if-le",
            Self::IfEqz { .. } => "if-eqz",
            Self::IfNez { .. } => "if-nez",
            Self::IfLtz { .. } => "if-ltz",
            Self::IfGez { .. } => "if-gez",
            Self::IfGtz { .. } => "if-gtz",
            Self::IfLez { .. } => "if-lez",

            Self::Aget { .. } => "aget",
            Self::AgetWide { .. } => "aget-wide",
            Self::AgetObject { .. } => "aget-object",
            Self::AgetBoolean { .. } => "aget-boolean",
            Self::AgetByte { .. } => "aget-byte",
            Self::AgetChar { .. } => "aget-char",
            Self::AgetShort { .. } => "aget-short",
            Self::Aput { .. } => "aput",
            Self::AputWide { .. } => "aput-wide",
            Self::AputObject { .. } => "aput-object",
            Self::AputBoolean { .. } => "aput-boolean",
            Self::AputByte { .. } => "aput-byte",
            Self::AputChar { .. } => "aput-char",
            Self::AputShort { .. } => "aput-short",

            Self::Iget { .. } => "iget",
            Self::IgetWide { .. } => "iget-wide",
            Self::IgetObject { .. } => "iget-object",
            Self::IgetBoolean { .. } => "iget-boolean",
            Self::IgetByte { .. } => "iget-byte",
            Self::IgetChar { .. } => "iget-char",
            Self::IgetShort { .. } => "iget-short",
            Self::Iput { .. } => "iput",
            Self::IputWide { .. } => "iput-wide",
            Self::IputObject { .. } => "iput-object",
            Self::IputBoolean { .. } => "iput-boolean",
            Self::IputByte { .. } => "iput-byte",
            Self::IputChar { .. } => "iput-char",
            Self::IputShort { .. } => "iput-short",
            Self::Sget { .. } => "sget",
            Self::SgetWide { .. } => "sget-wide",
            Self::SgetObject { .. } => "sget-object",
            Self::SgetBoolean { .. } => "sget-boolean",
            Self::SgetByte { .. } => "sget-byte",
            Self::SgetChar { .. } => "sget-char",
            Self::SgetShort { .. } => "sget-short",
            Self::Sput { .. } => "sput",
            Self::SputWide { .. } => "sput-wide",
            Self::SputObject { .. } => "sput-object",
            Self::SputBoolean { .. } => "sput-boolean",
            Self::SputByte { .. } => "sput-byte",
            Self::SputChar { .. } => "sput-char",
            Self::SputShort { .. } => "sput-short",

            Self::InvokeVirtual { .. } => "invoke-virtual",
            Self::InvokeSuper { .. } => "invoke-super",
            Self::InvokeDirect { .. } => "invoke-direct",
            Self::InvokeStatic { .. } => "invoke-static",
            Self::InvokeInterface { .. } => "invoke-interface",

            Self::InvokeVirtualRange { .. } => "invoke-virtual/range",
            Self::InvokeSuperRange { .. } => "invoke-super/range",
            Self::InvokeDirectRange { .. } => "invoke-direct/range",
            Self::InvokeStaticRange { .. } => "invoke-static/range",
            Self::InvokeInterfaceRange { .. } => "invoke-interface/range",

            Self::NegInt { .. } => "neg-int",
            Self::NotInt { .. } => "not-int",
            Self::NegLong { .. } => "neg-long",
            Self::NotLong { .. } => "not-long",
            Self::NegFloat { .. } => "neg-float",
            Self::NegDouble { .. } => "neg-double",
            Self::IntToLong { .. } => "int-to-long",
            Self::IntToFloat { .. } => "int-to-float",
            Self::IntToDouble { .. } => "int-to-double",
            Self::LongToInt { .. } => "long-to-int",
            Self::LongToFloat { .. } => "long-to-float",
            Self::LongToDouble { .. } => "long-to-double",
            Self::FloatToInt { .. } => "float-to-int",
            Self::FloatToLong { .. } => "float-to-long",
            Self::FloatToDouble { .. } => "float-to-double",
            Self::DoubleToInt { .. } => "double-to-int",
            Self::DoubleToLong { .. } => "double-to-long",
            Self::DoubleToFloat { .. } => "double-to-float",
            Self::IntToByte { .. } => "int-to-byte",
            Self::IntToChar { .. } => "int-to-char",
            Self::IntToShort { .. } => "int-to-short",

            Self::AddInt { .. } => "add-int",
            Self::SubInt { .. } => "sub-int",
            Self::MulInt { .. } => "mul-int",
            Self::DivInt { .. } => "div-int",
            Self::RemInt { .. } => "rem-int",
            Self::AndInt { .. } => "and-int",
            Self::OrInt { .. } => "or-int",
            Self::XorInt { .. } => "xor-int",
            Self::ShlInt { .. } => "shl-int",
            Self::ShrInt { .. } => "shr-int",
            Self::UShrInt { .. } => "ushr-int",
            Self::AddLong { .. } => "add-long",
            Self::SubLong { .. } => "sub-long",
            Self::MulLong { .. } => "mul-long",
            Self::DivLong { .. } => "div-long",
            Self::RemLong { .. } => "rem-long",
            Self::AndLong { .. } => "and-long",
            Self::OrLong { .. } => "or-long",
            Self::XorLong { .. } => "xor-long",
            Self::ShlLong { .. } => "shl-long",
            Self::ShrLong { .. } => "shr-long",
            Self::UShrLong { .. } => "ushr-long",
            Self::AddFloat { .. } => "add-float",
            Self::SubFloat { .. } => "sub-float",
            Self::MulFloat { .. } => "mul-float",
            Self::DivFloat { .. } => "div-float",
            Self::RemFloat { .. } => "rem-float",
            Self::AddDouble { .. } => "add-double",
            Self::SubDouble { .. } => "sub-double",
            Self::MulDouble { .. } => "mul-double",
            Self::DivDouble { .. } => "div-double",
            Self::RemDouble { .. } => "rem-double",

            Self::AddInt2Addr { .. } => "add-int/2addr",
            Self::SubInt2Addr { .. } => "sub-int/2addr",
            Self::MulInt2Addr { .. } => "mul-int/2addr",
            Self::DivInt2Addr { .. } => "div-int/2addr",
            Self::RemInt2Addr { .. } => "rem-int/2addr",
            Self::AndInt2Addr { .. } => "and-int/2addr",
            Self::OrInt2Addr { .. } => "or-int/2addr",
            Self::XorInt2Addr { .. } => "xor-int/2addr",
            Self::ShlInt2Addr { .. } => "shl-int/2addr",
            Self::ShrInt2Addr { .. } => "shr-int/2addr",
            Self::UShrInt2Addr { .. } => "ushr-int/2addr",
            Self::AddLong2Addr { .. } => "add-long/2addr",
            Self::SubLong2Addr { .. } => "sub-long/2addr",
            Self::MulLong2Addr { .. } => "mul-long/2addr",
            Self::DivLong2Addr { .. } => "div-long/2addr",
            Self::RemLong2Addr { .. } => "rem-long/2addr",
            Self::AndLong2Addr { .. } => "and-long/2addr",
            Self::OrLong2Addr { .. } => "or-long/2addr",
            Self::XorLong2Addr { .. } => "xor-long/2addr",
            Self::ShlLong2Addr { .. } => "shl-long/2addr",
            Self::ShrLong2Addr { .. } => "shr-long/2addr",
            Self::UShrLong2Addr { .. } => "ushr-long/2addr",
            Self::AddFloat2Addr { .. } => "add-float/2addr",
            Self::SubFloat2Addr { .. } => "sub-float/2addr",
            Self::MulFloat2Addr { .. } => "mul-float/2addr",
            Self::DivFloat2Addr { .. } => "div-float/2addr",
            Self::RemFloat2Addr { .. } => "rem-float/2addr",
            Self::AddDouble2Addr { .. } => "add-double/2addr",
            Self::SubDouble2Addr { .. } => "sub-double/2addr",
            Self::MulDouble2Addr { .. } => "mul-double/2addr",
            Self::DivDouble2Addr { .. } => "div-double/2addr",
            Self::RemDouble2Addr { .. } => "rem-double/2addr",

            Self::AddIntLit16 { .. } => "add-int/lit16",
            Self::RsubInt { .. } => "rsub-int",
            Self::MulIntLit16 { .. } => "mul-int/lit16",
            Self::DivIntLit16 { .. } => "div-int/lit16",
            Self::RemIntLit16 { .. } => "rem-int/lit16",
            Self::AndIntLit16 { .. } => "and-int/lit16",
            Self::OrIntLit16 { .. } => "or-int/lit16",
            Self::XorIntLit16 { .. } => "xor-int/lit16",
            Self::AddIntLit8 { .. } => "add-int/lit8",
            Self::RsubIntLit8 { .. } => "rsub-int/lit8",
            Self::MulIntLit8 { .. } => "mul-int/lit8",
            Self::DivIntLit8 { .. } => "div-int/lit8",
            Self::RemIntLit8 { .. } => "rem-int/lit8",
            Self::AndIntLit8 { .. } => "and-int/lit8",
            Self::OrIntLit8 { .. } => "or-int/lit8",
            Self::XorIntLit8 { .. } => "xor-int/lit8",
            Self::ShlIntLit8 { .. } => "shl-int/lit8",
            Self::ShrIntLit8 { .. } => "shr-int/lit8",
            Self::UShrIntLit8 { .. } => "ushr-int/lit8",

            Self::InvokePolymorphic { .. } => "invoke-polymorphic",
            Self::InvokePolymorphicRange { .. } => "invoke-polymorphic/range",
            Self::InvokeCustom { .. } => "invoke-custom",
            Self::InvokeCustomRange { .. } => "invoke-custom/range",
            Self::ConstMethodHandle { .. } => "const-method-handle",
            Self::ConstMethodType { .. } => "const-method-type",
        }
    }
}
